{"version":3,"sources":["logo.svg","components/tables/src/Table.module.scss","test.module.scss","components/tables/src/Table.tsx","components/tables/index.tsx","App.tsx","serviceWorker.js","index.js"],"names":["module","exports","styles","require","Table","children","border","borderless","hover","useState","classNames","setClassNames","tableBorder","setTableBorder","tableBorderless","setTableBorderless","tableHover","setTableHover","useLayoutEffect","table","filter","item","join","className","tableContainer","App","test__lorem","test","src","logo","alt","text","href","target","rel","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+GAAAA,EAAOC,QAAU,IAA0B,kC,yFCC3CD,EAAOC,QAAU,CAAC,eAAiB,8BAA8B,MAAQ,qBAAqB,YAAc,2BAA2B,gBAAkB,+BAA+B,WAAa,4B,gBCArMD,EAAOC,QAAU,CAAC,KAAO,mBAAmB,YAAc,4B,+GCCpDC,EAASC,EAAQ,ICDRC,EDe8B,SAAC,GAKvC,IAJLC,EAII,EAJJA,SAII,IAHJC,cAGI,aAFJC,kBAEI,aADJC,aACI,WACgCC,mBAAS,IADzC,mBACGC,EADH,KACeC,EADf,OAEkCF,mBAASH,GAF3C,mBAEGM,EAFH,KAEgBC,EAFhB,OAG0CJ,mBAASF,GAHnD,mBAGGO,EAHH,KAGoBC,EAHpB,OAIgCN,mBAASD,GAJzC,mBAIGQ,EAJH,KAIeC,EAJf,KA0BJ,OApBAC,0BAAgB,WACdL,IAAeD,GAAcV,EAAM,cAClC,CAACU,IAEJM,0BAAgB,WACdH,IAAmBD,GAAkBZ,EAAM,kBAC1C,CAACY,IAEJI,0BAAgB,WACdD,IAAcD,GAAad,EAAM,aAChC,CAACc,IAEJE,0BAAgB,WACdP,EACE,CAACT,EAAOiB,MAAOP,EAAaE,EAAiBE,GAC1CI,OAAO,SAAAC,GAAI,OAAIA,IACfC,KAAK,OAET,CAACV,EAAaE,EAAiBE,IAGhC,yBAAKO,UAAWrB,EAAOsB,gBACrB,2BAAOD,UAAWb,GAAaL,KE7C/BH,EAASC,EAAQ,IAuCRsB,MArCf,WACE,OACE,yBAAKF,UAAS,UAAKrB,EAAOwB,YAAZ,YAA2BxB,EAAOyB,OAC9C,4BAAQJ,UAAU,cAChB,yBAAKK,IAAKC,IAAMN,UAAU,WAAWO,IAAI,SACzC,uBAAGP,UAAWrB,EAAO6B,MACnB,4CADF,IAC0B,6BAD1B,yOAIA,uBACER,UAAU,WACVS,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJN,gBASF,kBAAC,EAAD,KACE,sDACA,+BACE,2CACA,0CACA,qCAEF,+BACE,4BACE,oCACA,uCACA,uCCvBQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.de0afd53.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tableContainer\":\"Table_tableContainer__2sA1M\",\"table\":\"Table_table__2Hhlv\",\"tableBorder\":\"Table_tableBorder__VUoZi\",\"tableBorderless\":\"Table_tableBorderless__3Kzi7\",\"tableHover\":\"Table_tableHover__1PrlN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"test\":\"test_test__3hlcf\",\"test__lorem\":\"test_test__lorem__rCsZU\"};","import React, { useLayoutEffect, useState, FunctionComponent } from \"react\";\n\nconst styles = require(\"./Table.module.scss\");\n\ninterface TableProps {\n  border?: boolean;\n  borderless?: boolean;\n  hover?: boolean;\n}\n\n/**\n * @visibleName Tables\n * @version 1.0.0\n * @author [Rankmi](https://github.com/Rankmi)\n */\n\nconst Table: FunctionComponent<TableProps> = ({\n  children,\n  border = false,\n  borderless = false,\n  hover = false\n}) => {\n  const [classNames, setClassNames] = useState(\"\");\n  const [tableBorder, setTableBorder] = useState(border);\n  const [tableBorderless, setTableBorderless] = useState(borderless);\n  const [tableHover, setTableHover] = useState(hover);\n\n  useLayoutEffect(() => {\n    setTableBorder(tableBorder ? styles[`tableBorder`] : false);\n  }, [tableBorder]);\n\n  useLayoutEffect(() => {\n    setTableBorderless(tableBorderless ? styles[`tableBorderless`] : false);\n  }, [tableBorderless]);\n\n  useLayoutEffect(() => {\n    setTableHover(tableHover ? styles[`tableHover`] : false);\n  }, [tableHover]);\n\n  useLayoutEffect(() => {\n    setClassNames(\n      [styles.table, tableBorder, tableBorderless, tableHover]\n        .filter(item => item)\n        .join(\" \")\n    );\n  }, [tableBorder, tableBorderless, tableHover]);\n\n  return (\n    <div className={styles.tableContainer}>\n      <table className={classNames}>{children}</table>\n    </div>\n  );\n};\n\nexport default Table;\n","import Table from \"./src/Table\";\nexport default Table;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Table from './components/tables';\nconst styles = require(\"./test.module.scss\")\n \nfunction App() {\n  return (\n    <div className={`${styles.test__lorem} ${styles.test}`}>\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p className={styles.text}>\n          <code>Hola Mundo</code> <br/>\n          Lorem ipsum, dolor sit amet consectetur adipisicing elit. Et voluptas repellat tempore nihil, fuga pariatur illum asperiores praesentium porro cupiditate obcaecati commodi quidem magni id doloremque culpa maiores vel? Temporibus.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n      <Table>\n        <caption>Table description</caption>\n        <thead>\n          <th>First name:</th>\n          <th>Last name:</th>\n          <th>Age:</th>\n        </thead>\n        <tbody>\n          <tr>\n            <td>Adam</td>\n            <td>Denisov</td>\n            <td>26</td>\n          </tr>\n        </tbody>\n      </Table>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.tsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}