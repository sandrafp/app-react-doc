{"ast":null,"code":"var _jsxFileName = \"/Users/sandra/Desktop/Repos-personales/app-react-doc/src/button/src/Button.tsx\";\nimport React from \"react\";\nimport IconWrapper from \"./components/icon-wrapper/IconWrapper\"; // import ButtonProps from \"./resources/ButtonProps.interface\";\n\nimport { // ButtonVariant,\nButtonSizes, ButtonType } from \"./resources/ButtonAttributes.enum\";\n/**\n * @visibleName Buttons\n * @version 1.0.0\n * @author [Rankmi](https://github.com/Rankmi)\n */\n\nconst Button = ({\n  type = ButtonType.Button,\n  // variant = ButtonVariant.Primary,\n  size = ButtonSizes.Medium,\n  ariaLabel = \"string\",\n  // block = false,\n  disabled = false,\n  // outline = false,\n  // color = null,\n  // opacity = null,\n  children,\n  // className,\n  onClick,\n  icon\n}) => {\n  // const [buttonVariant, setButtonVariant] = useState(\"\");\n  // const [buttonSize, setButtonSize] = useState([`button${size}`]);\n  // const [buttonBlock, setButtonBlock] = useState(false);\n  // const [buttonColor, setButtonColor] = useState(\"\");\n  // const [classNames, setClassNames] = useState(\"\");\n  // useLayoutEffect(() => {\n  //   setButtonSize([`button${size}`]);\n  // }, [size]);\n  // useLayoutEffect(() => {\n  //   if (block) {\n  //     setButtonBlock([`buttonBlock`]);\n  //   } else {\n  //     setButtonBlock(false);\n  //   }\n  // }, [block]);\n  // // set color and opacity-brighness variant for className\n  // useLayoutEffect(() => {\n  //   setButtonColor([`button${color}`]);\n  //   const outlineTag = outline ? \"Outline\" : \"\";\n  //   if (color) {\n  //     setButtonVariant(\"\");\n  //     setButtonColor([`button${color}${outlineTag}`]);\n  //     if (opacity) {\n  //       setButtonColor([`button${color}${outlineTag}${opacity}`]);\n  //     }\n  //   } else {\n  //     setButtonVariant([`button${variant}${outlineTag}`]);\n  //   }\n  // }, [variant, opacity, color, outline]);\n  // useLayoutEffect(() => {\n  //   setClassNames(\n  //     [\n  //       buttonSize,\n  //       buttonVariant,\n  //       buttonBlock,\n  //       buttonColor,\n  //       className\n  //     ]\n  //       .filter(item => item)\n  //       .join(\" \")\n  //   );\n  // }, [buttonVariant, buttonBlock, buttonSize, buttonColor, className]);\n  return React.createElement(\"button\", {\n    type: type,\n    \"aria-label\": ariaLabel,\n    disabled: disabled,\n    className: \"BUTTON\",\n    onClick: onClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, icon && React.createElement(IconWrapper, {\n    icon: icon,\n    sizes: size,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }), children);\n};\n\nexport default Button;\nexport * from \"../src/resources/ButtonAttributes.enum\";","map":{"version":3,"sources":["/Users/sandra/Desktop/Repos-personales/app-react-doc/src/button/src/Button.tsx"],"names":["React","IconWrapper","ButtonSizes","ButtonType","Button","type","size","Medium","ariaLabel","disabled","children","onClick","icon"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,uCAAxB,C,CACA;;AACA,SACE;AACAC,WAFF,EAGEC,UAHF,QAIO,mCAJP;AAMA;;;;;;AAMA,MAAMC,MAAM,GAAG,CAAC;AACdC,EAAAA,IAAI,GAAGF,UAAU,CAACC,MADJ;AAEd;AACAE,EAAAA,IAAI,GAAGJ,WAAW,CAACK,MAHL;AAIdC,EAAAA,SAAS,GAAG,QAJE;AAKd;AACAC,EAAAA,QAAQ,GAAG,KANG;AAOd;AACA;AACA;AACAC,EAAAA,QAVc;AAWd;AACAC,EAAAA,OAZc;AAadC,EAAAA;AAbc,CAAD,KAcT;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SACE;AACE,IAAA,IAAI,EAAEP,IADR;AAEE,kBAAYG,SAFd;AAGE,IAAA,QAAQ,EAAEC,QAHZ;AAIE,IAAA,SAAS,EAAC,QAJZ;AAKE,IAAA,OAAO,EAAEE,OALX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAOGC,IAAI,IAAI,oBAAC,WAAD;AAAa,IAAA,IAAI,EAAEA,IAAnB;AAAyB,IAAA,KAAK,EAAEN,IAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPX,EAQGI,QARH,CADF;AAYD,CAxED;;AA0EA,eAAeN,MAAf;AACA,cAAc,wCAAd","sourcesContent":["import React from \"react\";\nimport IconWrapper from \"./components/icon-wrapper/IconWrapper\";\n// import ButtonProps from \"./resources/ButtonProps.interface\";\nimport {\n  // ButtonVariant,\n  ButtonSizes,\n  ButtonType\n} from \"./resources/ButtonAttributes.enum\";\n\n/**\n * @visibleName Buttons\n * @version 1.0.0\n * @author [Rankmi](https://github.com/Rankmi)\n */\n\nconst Button = ({\n  type = ButtonType.Button,\n  // variant = ButtonVariant.Primary,\n  size = ButtonSizes.Medium,\n  ariaLabel = \"string\",\n  // block = false,\n  disabled = false,\n  // outline = false,\n  // color = null,\n  // opacity = null,\n  children,\n  // className,\n  onClick,\n  icon\n}) => {\n  // const [buttonVariant, setButtonVariant] = useState(\"\");\n  // const [buttonSize, setButtonSize] = useState([`button${size}`]);\n  // const [buttonBlock, setButtonBlock] = useState(false);\n  // const [buttonColor, setButtonColor] = useState(\"\");\n  // const [classNames, setClassNames] = useState(\"\");\n  // useLayoutEffect(() => {\n  //   setButtonSize([`button${size}`]);\n  // }, [size]);\n\n  // useLayoutEffect(() => {\n  //   if (block) {\n  //     setButtonBlock([`buttonBlock`]);\n  //   } else {\n  //     setButtonBlock(false);\n  //   }\n  // }, [block]);\n\n  // // set color and opacity-brighness variant for className\n  // useLayoutEffect(() => {\n  //   setButtonColor([`button${color}`]);\n  //   const outlineTag = outline ? \"Outline\" : \"\";\n  //   if (color) {\n  //     setButtonVariant(\"\");\n  //     setButtonColor([`button${color}${outlineTag}`]);\n  //     if (opacity) {\n  //       setButtonColor([`button${color}${outlineTag}${opacity}`]);\n  //     }\n  //   } else {\n  //     setButtonVariant([`button${variant}${outlineTag}`]);\n  //   }\n  // }, [variant, opacity, color, outline]);\n  // useLayoutEffect(() => {\n  //   setClassNames(\n  //     [\n  //       buttonSize,\n  //       buttonVariant,\n  //       buttonBlock,\n  //       buttonColor,\n  //       className\n  //     ]\n  //       .filter(item => item)\n  //       .join(\" \")\n  //   );\n  // }, [buttonVariant, buttonBlock, buttonSize, buttonColor, className]);\n\n  return (\n    <button\n      type={type}\n      aria-label={ariaLabel}\n      disabled={disabled}\n      className=\"BUTTON\"\n      onClick={onClick}\n    >\n      {icon && <IconWrapper icon={icon} sizes={size} />}\n      {children}\n    </button>\n  );\n};\n\nexport default Button;\nexport * from \"../src/resources/ButtonAttributes.enum\";\n"]},"metadata":{},"sourceType":"module"}